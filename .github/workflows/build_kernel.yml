name: Build Kernel

on:
  workflow_dispatch:
    inputs:
      KERNEL_MODULE:
        description : 'kernel module and device tree url'
        required: true
        default: 'https://github.com/OnePlusOSS/android_kernel_modules_and_devicetree_oneplus_sm6375.git'
      KERNEL_MODULE_BRANCH:
        description: 'kernel module branch'
        required: true
        default: 'oneplus/sm6375_u_14.0.0_nord_ce_2_lite_5g'
      KERNEL_SOURCE:
        description: 'Kernel source URL'
        required: true
        default: 'https://github.com/OnePlus-Nord4-devs/android_kernel_oneplus_sm7675.git'
      KERNEL_BRANCH:
        description: 'Kernel branch'
        required: true
        default: 'avalon'
      KERNEL_NAME:
        description: 'Kernel/zip name'
        required: true
        default: 'perf'
      CONFIG_FILE:
        description: 'Config file (You can put multiple configs separated by space)'
        required: true
        default: 'vendor/holi-qgki_defconfig'
      TOOLCHAIN_URL:
        description: "Clone URL of your toolchain including branch"
        required: true
        default: 'https://github.com/kdrag0n/proton-clang.git'
      ANYKERNEL:
        description: "Clone URL of your AnyKernel including branch"
        required: true
        default: 'https://github.com/aosp-realm/AnyKernel3.git -b master'

jobs:
  Kernel:
    runs-on: ubuntu-latest
    permissions: write-all
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}

    steps:
      - name: Set-up environment
        run: |
          rm -rf ${{ github.workspace }}/*
          sudo apt-get update
          sudo apt-get install -y build-essential bc gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev libfl-dev
          sudo apt-get install -y curl git ftp lftp wget libarchive-tools ccache python3 python3-dev
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar cpio jq

      - name: Cloning Kernel Source
        run: |
          git clone ${{ github.event.inputs.KERNEL_MODULE }} -b ${{ github.event.inputs.KERNEL_MODULE_BRANCH }} ${{ github.workspace }}
          cd ${{ github.workspace }}
          git clone --single-branch --depth=1 --no-tags ${{ github.event.inputs.KERNEL_SOURCE }} -b ${{ github.event.inputs.KERNEL_BRANCH }} kernel_platform/msm-kernel

      - name: Cloning Toolchain
        run: |
          git clone --single-branch --depth=1 --no-tags ${{ github.event.inputs.TOOLCHAIN_URL }} ${{ github.workspace }}/toolchain

      - name: Set-up Cache
        id: cache-out
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/kernel_platform/msm-kernel/out
          key: ${{ github.event.inputs.KERNEL_SOURCE }}-out-

      - name: Start Compilation
        run: |
          objdir="${{ github.workspace }}/kernel_platform/msm/out"
          anykernel="${{ github.workspace }}/anykernel"
          clang_dir="${{ github.workspace }}/toolchain"
          kernel_name="${{ github.event.inputs.KERNEL_NAME }}"
          zip_name="${kernel_name}-$(date +"%d-%m-%Y-%H%M").zip"
          arch="arm64"
          export PATH="${clang_dir}/bin:$PATH"
          cd ${{ github.workspace }}/kernel_platform/msm-kernel
          export ARCH=arm64
          export SUBARCH=arm64
          export PATH="${{ github.workspace }}/toolchain/bin:$PATH"
          make O=out ARCH=${arch} gki_defconfig
          make -j$(nproc --all) O=out ARCH=${arch} CC=clang CROSS_COMPILE=aarch64-linux-gnu- AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip

          completion() {
            cd "${objdir}"
            compiled_image="arch/arm64/boot/Image"
            compiled_dtbo="arch/arm64/boot/dtbo.img"
            qcom_dtb="arch/arm64/boot/dts/vendor/qcom"

            if [[ -f ${compiled_image} && -f ${compiled_dtbo} ]]; then
              git clone -q ${{ github.event.inputs.ANYKERNEL }} "$anykernel"
              cp "${compiled_image}" "${{ github.workspace }}"
              cp "${compiled_dtbo}" "${{ github.workspace }}"

              if ls ${qcom_dtb}/*.dtb 1> /dev/null 2>&1; then
                cp ${qcom_dtb}/*.dtb "${{ github.workspace }}"
              fi

              mv -f "${compiled_image}" "$anykernel/Image"
              mv -f "${compiled_dtbo}" "$anykernel/dtbo.img"
              cd "$anykernel"
              zip -r AnyKernel.zip *
              mv -- "AnyKernel.zip" "$zip_name"
              mv -- "$anykernel/$zip_name" "${{ github.workspace }}/$zip_name"
              rm -rf "$anykernel"
              end=$(date +"%s")
              diff=$((end - start))
              echo -e "BUILD COMPLETED IN ${diff} SECONDS"
            else
              echo "ERROR: Kernel compilation failed!"
              exit 1
            fi
          }

          make_defconfig
          compile
          completion

          cd "${{ github.workspace }}"

          # Set-up file info
          zip_file=$(find . -name '${{ github.event.inputs.KERNEL_NAME }}*.zip' -print -quit)
          echo "ZIP_FILE=$zip_file" >> $GITHUB_ENV
          echo "ZIP_NAME=$(basename "$zip_file" .zip)" >> $GITHUB_ENV
          echo "RELEASE_DATE=$(date +'%B %-d, %Y %H:%M')" >> $GITHUB_ENV
          echo "DTBO=${{ github.workspace }}/dtbo.img" >> $GITHUB_ENV
          echo "IMAGE=${{ github.workspace }}/Image" >> $GITHUB_ENV

      - name: Upload files to repository releases page
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ github.workspace }}/*.dtb
            ${{ env.ZIP_FILE }}
            ${{ env.DTBO }}
            ${{ env.IMAGE }}
          name: ${{ env.ZIP_NAME }}
          tag_name: ${{ github.run_id }}
          body: |
            Released on ${{ env.RELEASE_DATE }}
            
